//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-22781540
// Cuda compilation tools, release 9.0, V9.0.176
// Based on LLVM 3.4svn
//

.version 6.0
.target sm_60
.address_size 64

	// .globl	_Z7Vec_addPfS_S_iS_PjS0_

.visible .entry _Z7Vec_addPfS_S_iS_PjS0_(
	.param .u64 _Z7Vec_addPfS_S_iS_PjS0__param_0,
	.param .u64 _Z7Vec_addPfS_S_iS_PjS0__param_1,
	.param .u64 _Z7Vec_addPfS_S_iS_PjS0__param_2,
	.param .u32 _Z7Vec_addPfS_S_iS_PjS0__param_3,
	.param .u64 _Z7Vec_addPfS_S_iS_PjS0__param_4,
	.param .u64 _Z7Vec_addPfS_S_iS_PjS0__param_5,
	.param .u64 _Z7Vec_addPfS_S_iS_PjS0__param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<29>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd1, [_Z7Vec_addPfS_S_iS_PjS0__param_0];
	ld.param.u64 	%rd2, [_Z7Vec_addPfS_S_iS_PjS0__param_2];
	ld.param.u32 	%r8, [_Z7Vec_addPfS_S_iS_PjS0__param_3];
	ld.param.u64 	%rd3, [_Z7Vec_addPfS_S_iS_PjS0__param_5];
	ld.param.u64 	%rd4, [_Z7Vec_addPfS_S_iS_PjS0__param_6];
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r10, %r9, %r11;
	mov.f32 	%f2, 0f3F800000;
	// inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f2;
  mov.b32 %r5, {low,low};}

	// inline asm
	mov.f32 	%f4, 0f3F4CCCCD;
	// inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f4;
  mov.b32 %r7, {low,low};}

	// inline asm
	setp.ge.s32	%p1, %r1, %r8;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd5, %rd1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f5, [%rd7];
	// inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f5;
  mov.b32 %r12, {low,low};}

	// inline asm
	// inline asm
	bar.sync 0;
	// inline asm
	// inline asm
	mov.u32 %r13, %clock;
	// inline asm
	// inline asm
	{add.f16x2 %r14,%r5,%r12;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r17,%r7,%r12;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r20,%r17,%r12;
}
	// inline asm
	// inline asm
	{add.f16x2 %r23,%r14,%r20;
}
	// inline asm
	// inline asm
	mov.u32 %r26, %clock;
	// inline asm
	cvta.to.global.u64 	%rd8, %rd3;
	add.s64 	%rd9, %rd8, %rd6;
	st.global.u32 	[%rd9], %r13;
	cvta.to.global.u64 	%rd10, %rd4;
	add.s64 	%rd11, %rd10, %rd6;
	st.global.u32 	[%rd11], %r26;
	// inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r23;
  cvt.f32.f16 %f6, low;}

	// inline asm
	cvta.to.global.u64 	%rd12, %rd2;
	add.s64 	%rd13, %rd12, %rd6;
	st.global.f32 	[%rd13], %f6;

BB0_2:
	ret;
}


